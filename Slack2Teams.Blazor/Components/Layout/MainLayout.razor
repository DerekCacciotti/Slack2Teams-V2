@rendermode @(new InteractiveServerRenderMode(false))
@using Slack2Teams.Shared.Interfaces
@inherits LayoutComponentBase
@inject NavigationManager _nav
@inject IAuthService _AuthService
<RadzenComponents @rendermode="InteractiveServer" />
<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => isSidebarExpanded = !isSidebarExpanded)"/>

            <div class="header-container">
                <RadzenLabel Text="Slack To Teams" class="header-start"/>
                <AuthorizeView>
                    <Authorized>
                        <div id="divAccountProfile" class="header-end">
                            <RadzenProfileMenu Click="Callback">
                                <Template>
                                    <span>@authenticationStateTask.Result.User.Identity.Name</span>
                                </Template>
                                <ChildContent>
                                    <RadzenProfileMenuItem Text="Settings" Icon="settings" Value="settings"></RadzenProfileMenuItem>
                                    <RadzenProfileMenuItem Text="Log Out" Icon="logout" Value="logout"></RadzenProfileMenuItem>
                                </ChildContent>
                            </RadzenProfileMenu>
                        </div>
                    </Authorized>
                </AuthorizeView>
            </div>
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@isSidebarExpanded">
        <S2TSideMenu></S2TSideMenu>

        <div class="rz-p-4">
        </div>
    </RadzenSidebar>
    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>
    <RadzenFooter>
        Footer
    </RadzenFooter>
</RadzenLayout>
@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    
    bool isSidebarExpanded = true;
    

    private async Task Callback(RadzenProfileMenuItem obj)
    {
        switch (obj.Value)
        {
            case "logout":
                await LogOut();
                break;
                case "settings":
                break;
        }
    }

    private async Task LogOut()
    {
        await _AuthService.LogOut();
    }
}


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<style>
    .header-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        padding: 0 10px; /* Optional: Add padding if needed */
    }

    .header-start {
        
    }

    .header-end {
        
    }
    
</style>